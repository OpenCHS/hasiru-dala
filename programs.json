[ {
  "name" : "Social Security",
  "uuid" : "bac54d2b-e127-408a-9035-41dcaa2ef6b3",
  "colour" : "#000080",
  "voided" : false,
  "enrolmentEligibilityCheckRule" : null,
  "enrolmentSummaryRule" : "'use strict';\n({params, imports}) => {\n    const summaries = [];\n\n    const RegistrationConceptSchemeMap = {\n        'Whether you have Voter Registration Card': {answer: 'Yes', scheme: 'Voter ID'},\n        'Whether you have Ration/BPL Card with your name included': {answer: 'Yes', scheme: 'Aadhar Card'},\n        'Whether you have Aadhar Card': {answer: 'Yes', scheme: 'Aadhar Card'},\n        'Whether you have Labour Card': {answer: 'Yes', scheme: 'Labour Card'},\n        'Whether you have Health Card': {answer: 'Yes', scheme: 'Health Card'},\n        'Whether you have PAN Card': {answer: 'Yes', scheme: 'PAN Card'},\n        'Whether you have Driving license': {answer: 'Yes', scheme: 'Driving license'},\n        'Whether you have Cast Certificate': {answer: 'Yes', scheme: 'Caste Certificate'}\n    };\n    const programEnrolment = params.programEnrolment;\n    const individual = programEnrolment.individual;\n    \n    const schemeAvailedInRegistration = (schemeName, conceptAnswer) => new imports.rulesConfig.RuleCondition({individual}).valueInRegistration(schemeName)\n        .containsAnyAnswerConceptName(conceptAnswer)\n        .matches();\n\n    const availedDuringRegistration = [];\n    _.forEach(RegistrationConceptSchemeMap, (v, k) => {\n        if (schemeAvailedInRegistration(k, v.answer)) {\n            availedDuringRegistration.push(v.scheme);\n        }\n    });\n    const findObservation = (conceptName, encounter) => {\n        const encObs = _.find(encounter.observations, (observation) => {\n            return observation.concept.name === conceptName\n        });\n        const cancelObs = _.find(encounter.cancelObservations, (observation) => {\n            return observation.concept.name === conceptName\n        });\n        return _.isEmpty(encObs) ? cancelObs : encObs;\n    };\n\n    const buildStartFacilitationStatus = (encounterDateTime, scheme, schemeStatus, facilitationWorkflow, facilitationStatus) => (\n        {encounterDateTime, scheme, schemeStatus, facilitationWorkflow, facilitationStatus}\n    );\n\n    const getSummary = (schemeStatus, status) => _.filter(schemeStatus, s => _.includes(s.status, status) && !_.includes(s.schemeStatus, 'Availed'))\n        .map(s => s.scheme).join(\", \") || 'None';\n    \n    const stepInfo = programEnrolment.nonVoidedEncounters()\n        .filter(encounter => (!_.isNil(encounter.encounterDateTime) || !_.isNil(encounter.cancelDateTime)) && encounter.encounterType.name !== 'Start Facilitation')\n        .map(encounter => {\n            const scheme = findObservation('Scheme', encounter);\n            const schemeStatus = findObservation('Scheme status', encounter);\n            const facilitationWorkflow = findObservation('Facilitation workflow', encounter);\n            const facilitationStatus = findObservation('Facilitation status', encounter);\n            return {\n                encounterDateTime: encounter.encounterDateTime || encounter.cancelDateTime,\n                scheme: scheme ? scheme.getReadableValue() : undefined,\n                schemeStatus: schemeStatus ? schemeStatus.getReadableValue() : undefined,\n                facilitationWorkflow: facilitationWorkflow ? facilitationWorkflow.getReadableValue() : undefined,\n                facilitationStatus: facilitationStatus ? facilitationStatus.getReadableValue() : undefined\n            };\n        });\n    const startFacilitationInfo = programEnrolment.nonVoidedEncounters()\n        .filter(encounter => _.isNil(encounter.encounterDateTime) || encounter.encounterType.name === 'Start Facilitation' || encounter.encounterType.name === 'Register already availed scheme')\n        .map(encounter => {\n            const encounterDateTime = encounter.encounterDateTime;\n            const enrolledSchemes = encounter.getObservationReadableValue(\"Enroll scheme\");\n            const schemesToUpdate = encounter.getObservationReadableValue(\"Update scheme\");\n            const schemesToRegister = encounter.getObservationReadableValue(\"Register scheme\");\n            const enrolled = _.map(enrolledSchemes, scheme => buildStartFacilitationStatus(encounterDateTime, [scheme], ['Facilitation in progress'], ['Enrolment'], ['Collect documents']));\n            const updated = _.map(schemesToUpdate, scheme => buildStartFacilitationStatus(encounterDateTime, [scheme], ['Facilitation in progress'], ['Update'], ['Collect documents']));\n            const registered = schemesToRegister && [buildStartFacilitationStatus(encounterDateTime, [schemesToRegister], ['Availed'], ['Register'], ['Ended'])] || [];\n            return [...enrolled, ...updated, ...registered];\n        }).flat();\n    const allData = [...stepInfo, ...startFacilitationInfo];\n    const availedDuringFacilitation = _.filter(allData, data => _.includes(data.schemeStatus, 'Availed')).map(data => data.scheme);\n    const allAvailed = [...availedDuringRegistration, ...availedDuringFacilitation].join(\", \");\n\n    const latestSchemeWiseStatus = _.chain(allData)\n        .orderBy(['encounterDateTime'], ['desc'])\n        .groupBy('scheme')\n        .map((v, k) => ({scheme: k, status: v[0].facilitationStatus}))\n        .value();\n\n    summaries.push({name: 'Availed schemes', value: allAvailed || 'None'});\n    summaries.push({\n        name: 'Document Collection Pending',\n        value: getSummary(latestSchemeWiseStatus, 'Collect documents')\n    });\n    summaries.push({\n        name: 'Application Submission Pending',\n        value: getSummary(latestSchemeWiseStatus, 'Submit application')\n    });\n    summaries.push({\n        name: 'Application Status Enquiry Pending',\n        value: getSummary(latestSchemeWiseStatus, 'Enquire application status')\n    });\n    summaries.push({\n        name: 'Additional Document Collection Pending',\n        value: getSummary(latestSchemeWiseStatus, 'Collect additional documents')\n    });\n    return summaries;\n};\n"
} ]