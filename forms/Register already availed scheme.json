{
  "name" : "Register already availed scheme",
  "uuid" : "de2ab7a3-5a40-4b3e-a520-5949087639e4",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "062fa79f-d91c-49b8-a780-6e100e7fae24",
    "name" : "Information",
    "displayOrder" : 1.0,
    "display" : "Information",
    "formElements" : [ {
      "name" : "Register scheme",
      "uuid" : "19be079b-42d8-4553-87e7-334b96438a79",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Register scheme",
        "uuid" : "0b08d8e8-a000-43ca-987c-d69b2ebd062a"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const RegistrationConceptSchemeMap = {\n        'Whether you have Voter Registration Card': 'Voter ID',\n        'Whether you have Ration/BPL Card with your name included': 'Smart Card ( Ration Card/BPL Card)',\n        'Whether you have Aadhar Card': 'Aadhar Card',\n        'Whether you have Labour Card': 'Labour Card',\n        'Whether you have Health Card': 'Health Card',\n        'Whether you have PAN Card': 'PAN Card',\n        'Whether you have Driving license': 'Driving license',\n        'Whether you have Cast Certificate': 'Caste Certificate'\n    };\n    const findObservation = (conceptName, encounter) => {\n        const encObs = _.find(encounter.observations, (observation) => {\n            return observation.concept.name === conceptName\n        });\n        const cancelObs = _.find(encounter.cancelObservations, (observation) => {\n            return observation.concept.name === conceptName\n        });\n        return _.isEmpty(encObs) ? cancelObs : encObs;\n    };\n    const buildStartFacilitationStatus = (encounterDateTime, scheme, schemeStatus, facilitationWorkflow, facilitationStatus) => (\n        {encounterDateTime, scheme, schemeStatus, facilitationWorkflow, facilitationStatus}\n    );\n    const availedSchemesDuringRegistration = [];\n    const individual = programEncounter.programEnrolment.individual;\n    const schemeAvailedInRegistration = (schemeName, conceptAnswer) => new imports.rulesConfig.RuleCondition({individual}).valueInRegistration(schemeName)\n        .containsAnyAnswerConceptName(conceptAnswer)\n        .matches();\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    _.forEach(RegistrationConceptSchemeMap, (v, k) => {\n        if (schemeAvailedInRegistration(k, 'Yes')) {\n            availedSchemesDuringRegistration.push(v);\n        }\n    });\n    let nonVoidedEncounters = programEncounter.programEnrolment.nonVoidedEncounters();\n    const stepInfo = nonVoidedEncounters\n        .filter(encounter => (!_.isNil(encounter.encounterDateTime) || !_.isNil(encounter.cancelDateTime)) && encounter.encounterType.name !== 'Start Facilitation')\n        .map(encounter => {\n            const scheme = findObservation('Scheme', encounter);\n            const schemeStatus = findObservation('Scheme status', encounter);\n            const facilitationWorkflow = findObservation('Facilitation workflow', encounter);\n            const facilitationStatus = findObservation('Facilitation status', encounter);\n            return {\n                encounterDateTime: encounter.encounterDateTime || encounter.cancelDateTime,\n                scheme: scheme ? scheme.getReadableValue() : undefined,\n                schemeStatus: schemeStatus ? schemeStatus.getReadableValue() : undefined,\n                facilitationWorkflow: facilitationWorkflow ? facilitationWorkflow.getReadableValue() : undefined,\n                facilitationStatus: facilitationStatus ? facilitationStatus.getReadableValue() : undefined\n            };\n        });\n    const startFacilitationInfo = nonVoidedEncounters\n        .filter(encounter => _.isNil(encounter.encounterDateTime) || encounter.encounterType.name === 'Start Facilitation' || encounter.encounterType.name === 'Register already availed scheme')\n        .map(encounter => {\n            const encounterDateTime = encounter.encounterDateTime;\n            const enrolledSchemes = encounter.getObservationReadableValue(\"Enroll scheme\");\n            const schemesToRegister = encounter.getObservationReadableValue(\"Register scheme\");\n            const enrolled = _.map(enrolledSchemes, scheme => buildStartFacilitationStatus(encounterDateTime, [scheme], ['Facilitation in progress'], ['Enrolment'], ['Collect documents']));\n            const registered = schemesToRegister && [buildStartFacilitationStatus(encounterDateTime, [schemesToRegister], ['Availed'], ['Register'], ['Ended'])] || [];\n            return [...enrolled, ...registered];\n        }).flat();\n    const allData = [...stepInfo, ...startFacilitationInfo];\n    const availedSchemesDuringFacilitation = _.filter(allData, data => _.includes(data.schemeStatus, 'Availed')).map(data => data.scheme);\n    const schemesWithLatestInProgressFacilitation = _.chain(allData)\n        .reject(s => _.isEmpty(s.scheme))\n        .orderBy(['encounterDateTime'], ['desc'])\n        .groupBy('scheme')\n        .map((v, k) => ({scheme: k, status: v[0].schemeStatus}))\n        .filter(s => _.includes(s.status, 'Facilitation in progress'))\n        .map(s => s.scheme)\n        .value();\n    const availableSchemeConcepts = formElement.concept.getAnswers().map(ca => ca.concept);\n    const availedOrInProgressSchemes = [...availedSchemesDuringRegistration, ...availedSchemesDuringFacilitation, ...schemesWithLatestInProgressFacilitation].flat(1);\n    const nonAppplicableSchemes = [];\n    const localAddressProofAvailable = schemeAvailedInRegistration('Do you have a local address proof?', 'Yes');\n    const aadharCardAvailable = schemeAvailedInRegistration('Whether you have Aadhar Card', 'Yes');\n    const bankAccountAvailable = schemeAvailedInRegistration('Do you have a bank account?', 'Yes');\n    const martialStatusObs = individual.findObservation('Marital status');\n    const martialStatus = martialStatusObs && martialStatusObs.getReadableValue();\n    _.forEach(availableSchemeConcepts, concept => {\n        if (_.includes(availedOrInProgressSchemes, concept.name) ||\n            (concept.recordValueByKey('stateSpecific') === 'yes' && !localAddressProofAvailable) ||\n            (concept.recordValueByKey('eligibility_criteria_local_id_required') === 'yes' && !localAddressProofAvailable) ||\n            (concept.recordValueByKey('eligibility_criteria_bank_account_required') === 'yes' && !bankAccountAvailable) ||\n            (!_.isNil(concept.recordValueByKey('eligibility_criteria_gender')) && _.lowerCase(individual.gender.name) !== _.lowerCase(concept.recordValueByKey('eligibility_criteria_gender'))) ||\n            (!_.isNil(concept.recordValueByKey('eligibility_criteria_marital_status')) && !_.includes(_.map(concept.recordValueByKey('eligibility_criteria_marital_status').split(','), _.lowerCase), _.lowerCase(martialStatus))) ||\n            (concept.recordValueByKey('eligibility_criteria_aadhar_card_required') === 'yes' && !aadharCardAvailable) ||\n            (!_.isNil(concept.recordValueByKey('eligibility_criteria_age_minimum')) && individual.getAgeInYears(imports.moment(), true) <= _.toNumber(concept.recordValueByKey('eligibility_criteria_age_minimum'))) ||\n            (!_.isNil(concept.recordValueByKey('eligibility_criteria_age_maximum')) && individual.getAgeInYears(imports.moment(), true) >= _.toNumber(concept.recordValueByKey('eligibility_criteria_age_maximum')))\n        ) {\n            nonAppplicableSchemes.push(concept.name);\n        } \n    });\n    statusBuilder.skipAnswers(...nonAppplicableSchemes);\n    return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Enter the card number/scheme registration number",
      "uuid" : "efd9a6fd-3883-44c5-af79-382bb466006b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enter the card number/scheme registration number",
        "uuid" : "6b339f28-bc02-465e-a8d3-55cf6e08f42b"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Upload image or click a photo",
      "uuid" : "49f04899-2e21-420d-be57-3bb0fadc2ee3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Upload image or click a photo",
        "uuid" : "0d1603b9-47c8-4188-ac03-80606e49acf9"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : false
    } ]
  } ],
  "decisionRule" : "",
  "visitScheduleRule" : "\"use strict\";\n({params, imports}) => {\n    const schemeDetails = new Map();\n    const programEncounter = params.entity;\n    const observation = programEncounter.findObservation('Register scheme');\n    const conceptAnswers = !_.isEmpty(observation) && observation.concept.getAnswers();\n    _.forEach(conceptAnswers, ca => {\n        const keyValues = _.map(ca.concept.keyValues, ({key, value}) => ({[key]: ca.concept.recordValueByKey(key)}));\n        schemeDetails.set(ca.concept.name, Object.assign({}, ...keyValues))\n    });\n    const schemesToRegister = programEncounter.getObservationReadableValue(\"Register scheme\");\n    const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n        programEncounter,\n        programEnrolment: programEncounter.programEnrolment\n    });\n    const earliestDate = programEncounter.encounterDateTime;\n    const maxDate = imports.moment(earliestDate).add(8, 'days').toDate();\n    if (schemeDetails.get(schemesToRegister).recurring === 'yes' && imports.moment().isSameOrBefore(maxDate, 'day')) {\n        scheduleBuilder.add({\n            name: \"Start Facilitation For Recurring Scheme\",\n            encounterType: \"Start Facilitation\",\n            earliestDate: earliestDate,\n            maxDate: maxDate,\n            visitCreationStrategy: 'createNew'\n        });\n    }\n    return scheduleBuilder.getAllUnique('name');\n};",
  "validationRule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const validationResults = [];\n    if(!programEncounter.getObservationReadableValue('Register scheme')) {\n        validationResults.push(imports.common.createValidationError('Saving form without selecting any scheme not allowed'));\n    }\n    return validationResults;\n};",
  "checklistsRule" : ""
}