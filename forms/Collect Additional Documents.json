{
  "name" : "Collect Additional Documents",
  "uuid" : "cfe6b250-a8a5-4b61-a2fb-5a8b3afe776d",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "c1858aa1-f7db-4d10-902c-a1260885a890",
    "name" : "Information",
    "displayOrder" : 1.0,
    "display" : "Information",
    "formElements" : [ {
      "name" : "Dummy",
      "uuid" : "c4cedf52-fcfa-402f-9500-d466fba9f8fa",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Dummy",
        "uuid" : "e2a77752-ef1a-4ca7-8172-42e4fcb4dab9"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Collect additional documents",
      "uuid" : "97592089-0c3c-454d-af90-2aafd0b4d1b0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Dummy",
        "uuid" : "e2a77752-ef1a-4ca7-8172-42e4fcb4dab9"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : false
    } ]
  } ],
  "decisionRule" : "\"use strict\";\n({params, imports}) => {\n    const decisions = params.decisions;\n    const programEncounter = params.entity;\n    const schemeDetails = programEncounter.name.split('-');\n    const schemeName = imports.lodash.trim(schemeDetails[0]);\n    const workflow = imports.lodash.trim(schemeDetails[1]);\n    const workflowName = workflow === 'Update' ? 'Update' : (workflow === 'Recurring' ? 'Register' : 'Enrolment');\n    decisions.encounterDecisions.push({name: 'Scheme', value: [schemeName]});\n    decisions.encounterDecisions.push({name: 'Scheme status', value: ['Facilitation in progress']});\n    decisions.encounterDecisions.push({name: 'Facilitation workflow', value: [workflowName]});\n    decisions.encounterDecisions.push({name: 'Facilitation status', value: ['Submit application']});\n    return decisions;\n};",
  "visitScheduleRule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n        programEncounter,\n        programEnrolment: programEncounter.programEnrolment\n    });\n    const schemeDetails = programEncounter.name.split('-');\n    const workflow = imports.lodash.trim(schemeDetails[1]);\n    const schemeName = imports.lodash.trim(schemeDetails[0]);\n    const maxDate = imports.moment(programEncounter.encounterDateTime).add(1, 'days').toDate();\n    if (imports.moment().isSameOrBefore(maxDate, 'day')) {\n        scheduleBuilder.add({\n            name: workflow === 'Update' ? `${schemeName} - Update - Submit Application` : `${schemeName} - Submit Application`,\n            encounterType: 'Submit Application',\n            earliestDate: programEncounter.encounterDateTime,\n            maxDate\n        });\n    }\n    return scheduleBuilder.getAllUnique('name');\n};",
  "validationRule" : ""
}