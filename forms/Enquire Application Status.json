{
  "name" : "Enquire Application Status",
  "uuid" : "b5ca70d8-2633-4c7c-aaf6-eaac17a8410b",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "3b302c41-9ba1-4a04-8b5c-8cb19259ff44",
    "name" : "Information",
    "displayOrder" : 1.0,
    "display" : "Information",
    "formElements" : [ {
      "name" : "Dummy",
      "uuid" : "642e4e32-2931-4b97-bb91-726860888039",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Dummy",
        "uuid" : "e2a77752-ef1a-4ca7-8172-42e4fcb4dab9"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "What is the status of the application?",
      "uuid" : "c13136e8-c177-41fc-91b8-e15f602f577a",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "Yet to check the status" ]
      } ],
      "concept" : {
        "name" : "What is the status of the application",
        "uuid" : "a554e7ec-a138-4489-9653-964c7b604d78"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Type of Card",
      "uuid" : "5eb22509-0f94-44ff-8836-1390f218ebb0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Type of Card",
        "uuid" : "7479d59f-b41a-4876-894f-c90c2c972eae"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Card Number",
      "uuid" : "c3cf84c5-2a11-4bfa-ba79-b7d97d0ce9e5",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Card Number",
        "uuid" : "a929b924-8c31-4de5-b3ae-38ce5eb7e22c"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Upload image or click a photo",
      "uuid" : "645964d8-9168-49ff-96d8-b426a2c0183f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Upload image or click a photo",
        "uuid" : "0d1603b9-47c8-4188-ac03-80606e49acf9"
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Name of the card/scheme",
      "uuid" : "36748270-8970-4c6e-9d13-4467e29bf7f8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Name of the card/scheme",
        "uuid" : "edeabe44-f487-42ab-8135-292903aad2ff"
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Do you want to enter the card number/scheme registration number?",
      "uuid" : "520c3b8d-5330-4cae-96af-af7268b56a49",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Do you want to enter the card number/scheme registration number",
        "uuid" : "0320361f-390f-45e7-b7f4-a79629ade947"
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Enter the card number/scheme registration number",
      "uuid" : "add9ee01-6831-4d15-a922-9d00c7651e1c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enter the card number/scheme registration number",
        "uuid" : "6b339f28-bc02-465e-a8d3-55cf6e08f42b"
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('What is the status of the application').containsAnswerConceptName(\"Application Approved\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Do you want to upload an image?",
      "uuid" : "9498acc2-fcef-44a1-a22b-e4286c63ea4e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Do you want to upload an image",
        "uuid" : "6cd07340-c64d-4ae4-a964-786894b77f9a"
      },
      "displayOrder" : 9.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Upload image or click a photo",
      "uuid" : "547c31d9-f7c7-438f-bb96-4299be27894c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Upload or click the image of card",
        "uuid" : "01ec64df-e292-4d2e-a370-aacc1a8f9d80"
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('What is the status of the application').containsAnswerConceptName(\"Application Approved\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Enter the reason for rejection",
      "uuid" : "13908f4b-562e-44a1-9761-d1c9f1c45648",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enter the reason for rejection",
        "uuid" : "9b2e804b-73b7-4066-b9fc-f7de1f43bce3"
      },
      "displayOrder" : 11.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('What is the status of the application').containsAnswerConceptName(\"Application Rejected\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Do you want to the restart the process of facilitation?",
      "uuid" : "0ba22ecd-4d1e-40fc-adcf-482dca365f29",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Do you want to the restart the process of facilitation",
        "uuid" : "98003f91-cb1e-4f3d-bc2c-5e07fb1fc333"
      },
      "displayOrder" : 12.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('What is the status of the application').containsAnyAnswerConceptName(\"Application Rejected\", \"Lost to Follow Up / Unable to Determine Status\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Enter the date for rescheduling this step",
      "uuid" : "e5d8e2e5-4240-4d23-9353-7e611cd8f7f8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enter the date for rescheduling this step",
        "uuid" : "67fc4d4c-cf7c-4c36-a55d-b462595ec1c3"
      },
      "displayOrder" : 13.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    statusBuilder.show().when.valueInEncounter('What is the status of the application').containsAnyAnswerConceptName(\"Application under Processing/Review\");\n    const selectedDate = programEncounter.getObservationReadableValue('Enter the date for rescheduling this step');\n    selectedDate &&  statusBuilder.validationError(\"Past date not allowed\").whenItem(imports.moment().isAfter(selectedDate, 'day')).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Enter First Recurring Facilitation Date",
      "uuid" : "c8ac63d9-a7c1-433a-87bf-0cfa36631ecc",
      "keyValues" : [ ],
      "concept" : {
        "name" : "First Recurring Facilitation Date",
        "uuid" : "d0966ab2-0d92-444f-9094-785988214880"
      },
      "displayOrder" : 14.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const schemeDetails = programEncounter.name.split('-');\n    const schemeName = imports.lodash.trim(schemeDetails[0]);\n    const workflow = imports.lodash.trim(schemeDetails[1]);\n    const observation = programEncounter.programEnrolment.findLatestObservationFromEncounters('Enroll scheme', programEncounter);\n    const scheme = _.find(observation.concept.getAnswers(), ca => ca.concept.name === schemeName);\n    const formElement = params.formElement;\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    statusBuilder.show().when.valueInEncounter('What is the status of the application').containsAnyAnswerConceptName(\"Application Approved\")\n        .and.whenItem(scheme.concept.recordValueByKey('recurring') == 'yes' && workflow !== 'Update').is.truthy;\n    const selectedDate = programEncounter.getObservationReadableValue('Enter First Recurring Facilitation Date');\n    selectedDate &&  statusBuilder.validationError(\"Past date not allowed\").whenItem(imports.moment().isAfter(selectedDate, 'day')).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Do you want to reschedule this step to a future date?",
      "uuid" : "8afa8ec1-f098-40aa-978a-e30438c336df",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Do you want to reschedule this step to a future date",
        "uuid" : "cc07dd6a-5479-4e3b-a085-667f226db9fd"
      },
      "displayOrder" : 15.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Enter the date for rescheduling this step",
      "uuid" : "a0ea34b9-c347-45aa-a652-9aa7f3c9157b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enter the date for rescheduling this step",
        "uuid" : "67fc4d4c-cf7c-4c36-a55d-b462595ec1c3"
      },
      "displayOrder" : 16.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Do you want to reschedule this step to a future date').containsAnswerConceptName(\"Yes\");\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    } ]
  } ],
  "decisionRule" : "\"use strict\";\n({params, imports}) => {\n    const decisions = params.decisions;\n    const programEncounter = params.entity;\n    const nextStep = programEncounter.getObservationReadableValue(\"What is the status of the application\");\n    const restart = programEncounter.getObservationReadableValue('Do you want to the restart the process of facilitation');\n    var facilitationStatus = 'Enquire application status';\n    var schemeStatus = 'Facilitation in progress';\n    if (nextStep === 'Additional documents required') {\n        facilitationStatus = 'Collect additional documents';\n    } else if (nextStep === 'Application Approved') {\n        facilitationStatus = 'Ended';\n        schemeStatus = 'Availed';\n    } else if ((nextStep === 'Application Rejected' || nextStep === 'Lost to Follow Up / Unable to Determine Status') && restart === 'Yes') {\n        facilitationStatus = 'Collect documents'\n    } else if ((nextStep === 'Application Rejected' || nextStep === 'Lost to Follow Up / Unable to Determine Status') && restart === 'No') {\n        facilitationStatus = 'Ended';\n        schemeStatus = 'Not availed';\n    }\n    const schemeDetails = programEncounter.name.split('-');\n    const schemeName = imports.lodash.trim(schemeDetails[0]);\n    const workflow = imports.lodash.trim(schemeDetails[1]);\n    const workflowName = workflow === 'Update' ? 'Update' : (workflow === 'Recurring' ? 'Register' : 'Enrolment');\n    decisions.encounterDecisions.push({name: 'Scheme', value: [schemeName]});\n    decisions.encounterDecisions.push({name: 'Scheme status', value: [schemeStatus]});\n    decisions.encounterDecisions.push({name: 'Facilitation workflow', value: [workflowName]});\n    decisions.encounterDecisions.push({name: 'Facilitation status', value: [facilitationStatus]});\n    return decisions;\n};",
  "visitScheduleRule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n        programEncounter,\n        programEnrolment: programEncounter.programEnrolment\n    });\n    const schemeDetails = programEncounter.name.split('-');\n    const workflow = imports.lodash.trim(schemeDetails[1]);\n    const schemeName = imports.lodash.trim(schemeDetails[0]);\n    const scheduleNextStep = programEncounter.getObservationReadableValue(\"What is the status of the application\");\n    const firstRecuringDate = programEncounter.getObservationReadableValue('First Recurring Facilitation Date');\n    const getMaxDate = day => imports.moment(programEncounter.encounterDateTime).add(day, 'days').toDate();\n    if (scheduleNextStep === 'Additional documents required' && imports.moment().isSameOrBefore(getMaxDate(1), 'day')) {\n        scheduleBuilder.add({\n            name: workflow === 'Update' ? `${schemeName} - Update - Additional Document Collection` : `${schemeName} - Additional Document Collection`,\n            encounterType: 'Collect Additional Documents',\n            earliestDate: programEncounter.encounterDateTime,\n            maxDate: getMaxDate(1),\n            visitCreationStrategy: 'createNew'\n        });\n    }\n    const restartProcess = programEncounter.getObservationReadableValue(\"Do you want to the restart the process of facilitation\");\n    if (restartProcess === 'Yes' && imports.moment().isSameOrBefore(getMaxDate(7), 'day')) {\n        scheduleBuilder.add({\n            name: workflow === 'Update' ? `${schemeName} - Update - Collect Document` : `${schemeName} - Collect Document`,\n            encounterType: 'Documents Collection',\n            earliestDate: programEncounter.encounterDateTime,\n            maxDate: getMaxDate(7),\n            visitCreationStrategy: 'createNew'\n        });\n    }\n    const recurringMaxDate = imports.moment(firstRecuringDate).add(7, 'days').toDate();\n    if (scheduleNextStep === 'Application Approved' && !_.isNil(firstRecuringDate) && imports.moment().isSameOrBefore(recurringMaxDate, 'day')) {\n        scheduleBuilder.add({\n            name: `${schemeName} - Recurring`,\n            encounterType: 'Recurring Facilitation',\n            earliestDate: firstRecuringDate,\n            maxDate: recurringMaxDate,\n            visitCreationStrategy: 'createNew'\n        });\n    }\n    if(programEncounter.getObservationReadableValue('Enter the date for rescheduling this step')){\n        const earliestVisitDate = programEncounter.getObservationReadableValue('Enter the date for rescheduling this step');\n        scheduleBuilder.add({\n            name: programEncounter.name,\n            encounterType: programEncounter.encounterType.name,\n            earliestDate: earliestVisitDate,\n            maxDate: imports.moment(earliestVisitDate).add(7, 'days').toDate(),\n            visitCreationStrategy: 'createNew'\n        });\n    }\n    return scheduleBuilder.getAllUnique('name');\n};\n",
  "validationRule" : "",
  "checklistsRule" : ""
}