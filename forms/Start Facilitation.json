{
  "name" : "Start Facilitation",
  "uuid" : "4e2a85f6-e158-40a2-93f6-9971d3a7adeb",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "4d04670a-4d28-4dd2-b234-5349d62cf095",
    "name" : "Scheme Information",
    "displayOrder" : 1.0,
    "display" : "Scheme Information",
    "formElements" : [ {
      "name" : "Enroll to a scheme",
      "uuid" : "ac2d1684-cf19-4102-80fd-7279cb12ca74",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enroll scheme",
        "uuid" : "15a6fa4a-3eec-4bbe-8a65-5d3ff40e9ba4"
      },
      "displayOrder" : 1.0,
      "type" : "MultiSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Choose schemes to start enrolment facilitation for",
      "uuid" : "8826e5b6-bd76-451e-9de7-3c561f45ef86",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enroll scheme",
        "uuid" : "15a6fa4a-3eec-4bbe-8a65-5d3ff40e9ba4"
      },
      "displayOrder" : 2.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const RegistrationConceptSchemeMap = {\n        'Whether you have Voter Registration Card': {answer: 'Yes', scheme: 'Voter ID'},\n        'Whether you have Ration/BPL Card with your name included': {answer: 'Yes', scheme: 'Aadhar Card'},\n        'Whether you have Aadhar Card': {answer: 'Yes', scheme: 'Aadhar Card'},\n        'Whether you have Labour Card': {answer: 'Yes', scheme: 'Labour Card'},\n        'Whether you have Health Card': {answer: 'Yes', scheme: 'Health Card'},\n        'Whether you have PAN Card': {answer: 'Yes', scheme: 'PAN Card'},\n        'Whether you have Driving license': {answer: 'Yes', scheme: 'Driving license'},\n        'Whether you have Cast Certificate': {answer: 'Yes', scheme: 'Caste Certificate'}\n    };\n    const findObservation = (conceptName, encounter) => {\n        const encObs = _.find(encounter.observations, (observation) => {\n            return observation.concept.name === conceptName\n        });\n        const cancelObs = _.find(encounter.cancelObservations, (observation) => {\n            return observation.concept.name === conceptName\n        });\n        return _.isEmpty(encObs) ? cancelObs : encObs;\n    };\n    const buildStartFacilitationStatus = (encounterDateTime, scheme, schemeStatus, facilitationWorkflow, facilitationStatus) => (\n        {encounterDateTime, scheme, schemeStatus, facilitationWorkflow, facilitationStatus}\n    );\n    const availedSchemesDuringRegistration = [];\n    const individual = programEncounter.programEnrolment.individual;\n    const schemeAvailedInRegistration = (schemeName, conceptAnswer) => new imports.rulesConfig.RuleCondition({individual}).valueInRegistration(schemeName)\n        .containsAnyAnswerConceptName(conceptAnswer)\n        .matches();\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    _.forEach(RegistrationConceptSchemeMap, (v, k) => {\n        if (schemeAvailedInRegistration(k, v.answer)) {\n            availedSchemesDuringRegistration.push(v.scheme);\n        }\n    });\n    let nonVoidedEncounters = programEncounter.programEnrolment.nonVoidedEncounters();\n    const stepInfo = nonVoidedEncounters\n        .filter(encounter => (!_.isNil(encounter.encounterDateTime) || !_.isNil(encounter.cancelDateTime)) && encounter.encounterType.name !== 'Start Facilitation')\n        .map(encounter => {\n            const scheme = findObservation('Scheme', encounter);\n            const schemeStatus = findObservation('Scheme status', encounter);\n            const facilitationWorkflow = findObservation('Facilitation workflow', encounter);\n            const facilitationStatus = findObservation('Facilitation status', encounter);\n            return {\n                encounterDateTime: encounter.encounterDateTime || encounter.cancelDateTime,\n                scheme: scheme ? scheme.getReadableValue() : undefined,\n                schemeStatus: schemeStatus ? schemeStatus.getReadableValue() : undefined,\n                facilitationWorkflow: facilitationWorkflow ? facilitationWorkflow.getReadableValue() : undefined,\n                facilitationStatus: facilitationStatus ? facilitationStatus.getReadableValue() : undefined\n            };\n        });\n    const startFacilitationInfo = nonVoidedEncounters\n        .filter(encounter => _.isNil(encounter.encounterDateTime) || encounter.encounterType.name === 'Start Facilitation' || encounter.encounterType.name === 'Register already availed scheme')\n        .map(encounter => {\n            const encounterDateTime = encounter.encounterDateTime;\n            const enrolledSchemes = encounter.getObservationReadableValue(\"Enroll scheme\");\n            const schemesToRegister = encounter.getObservationReadableValue(\"Register scheme\");\n            const enrolled = _.map(enrolledSchemes, scheme => buildStartFacilitationStatus(encounterDateTime, [scheme], ['Facilitation in progress'], ['Enrolment'], ['Collect documents']));\n            const registered = schemesToRegister && [buildStartFacilitationStatus(encounterDateTime, [schemesToRegister], ['Availed'], ['Register'], ['Ended'])] || [];\n            return [...enrolled, ...registered];\n        }).flat();\n    const allData = [...stepInfo, ...startFacilitationInfo];\n    const availedSchemesDuringFacilitation = _.filter(allData, data => _.includes(data.schemeStatus, 'Availed')).map(data => data.scheme);\n    const schemesWithLatestInProgressFacilitation = _.chain(allData)\n        .reject(s => _.isEmpty(s.scheme))\n        .orderBy(['encounterDateTime'], ['desc'])\n        .groupBy('scheme')\n        .map((v, k) => ({scheme: k, status: v[0].schemeStatus}))\n        .filter(s => _.includes(s.status, 'Facilitation in progress'))\n        .map(s => s.scheme)\n        .value();\n    const availableSchemes = formElement.concept.getAnswers().map(ca => ca.concept.name);\n    const availedOrInProgressSchemes = [...availedSchemesDuringRegistration, ...availedSchemesDuringFacilitation, ...schemesWithLatestInProgressFacilitation].flat(1);\n    const anySchemesAvailed = [];\n    const nonAvailedSchemes = [];\n    _.forEach(availableSchemes, s => {\n        if (_.includes(availedOrInProgressSchemes, s)) {\n            anySchemesAvailed.push(s);\n        } else {\n            nonAvailedSchemes.push(s);\n        }\n    });\n    statusBuilder.skipAnswers(...anySchemesAvailed);\n    statusBuilder.show().whenItem(!_.includes(programEncounter.name, 'Recurring')).is.truthy\n        .and.whenItem(nonAvailedSchemes.length > 0).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Start recurring step for",
      "uuid" : "9d7f4f42-627e-4fa5-bb10-7f82a9f4bfa6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Start recurring steps for",
        "uuid" : "09207c84-eb6d-48e5-b8d0-812776c44eb4"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    statusBuilder.show().whenItem(_.includes(programEncounter.name, 'Recurring')).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Choose a scheme already enrolled on",
      "uuid" : "eecd4fb5-71d9-4618-92da-7f7cf5fa5946",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Register scheme",
        "uuid" : "0b08d8e8-a000-43ca-987c-d69b2ebd062a"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Select First Recurring Facilitation Date",
      "uuid" : "78475c37-ee83-4c11-9314-0a28b7253e1b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "First Recurring Facilitation Date",
        "uuid" : "d0966ab2-0d92-444f-9094-785988214880"
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const registerScheme = programEncounter.getObservationReadableValue('Start recurring steps for');\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    statusBuilder.show().whenItem(registerScheme).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Update Details",
      "uuid" : "b00e5ea6-ef29-49f1-b0b9-607f5e18380f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Update scheme",
        "uuid" : "6e181afe-62f3-4340-a6e8-f1d8e6fe4b68"
      },
      "displayOrder" : 6.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const RegistrationConceptSchemeMap = {\n        'Whether you have Voter Registration Card': {answer: 'Yes', scheme: 'Voter ID'},\n        'Whether you have Ration/BPL Card with your name included': {answer: 'Yes', scheme: 'Aadhar Card'},\n        'Whether you have Aadhar Card': {answer: 'Yes', scheme: 'Aadhar Card'},\n        'Whether you have Labour Card': {answer: 'Yes', scheme: 'Labour Card'},\n        'Whether you have Health Card': {answer: 'Yes', scheme: 'Health Card'},\n        'Whether you have PAN Card': {answer: 'Yes', scheme: 'PAN Card'},\n        'Whether you have Driving license': {answer: 'Yes', scheme: 'Driving license'},\n        'Whether you have Cast Certificate': {answer: 'Yes', scheme: 'Caste Certificate'}\n    };\n    const findObservation = (conceptName, encounter) => {\n        const encObs = _.find(encounter.observations, (observation) => {\n            return observation.concept.name === conceptName\n        });\n        const cancelObs = _.find(encounter.cancelObservations, (observation) => {\n            return observation.concept.name === conceptName\n        });\n        return _.isEmpty(encObs) ? cancelObs : encObs;\n    };\n    const buildStartFacilitationStatus = (encounterDateTime, scheme, schemeStatus, facilitationWorkflow, facilitationStatus) => (\n        {encounterDateTime, scheme, schemeStatus, facilitationWorkflow, facilitationStatus}\n    );\n    const availedSchemesDuringRegistration = [];\n    const individual = programEncounter.programEnrolment.individual;\n    const schemeAvailedInRegistration = (schemeName, conceptAnswer) => new imports.rulesConfig.RuleCondition({individual}).valueInRegistration(schemeName)\n        .containsAnyAnswerConceptName(conceptAnswer)\n        .matches();\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    _.forEach(RegistrationConceptSchemeMap, (v, k) => {\n        if (schemeAvailedInRegistration(k, v.answer)) {\n            availedSchemesDuringRegistration.push(v.scheme);\n        }\n    });\n    let nonVoidedEncounters = programEncounter.programEnrolment.nonVoidedEncounters();\n    const stepInfo = nonVoidedEncounters\n        .filter(encounter => (!_.isNil(encounter.encounterDateTime) || !_.isNil(encounter.cancelDateTime)) && encounter.encounterType.name !== 'Start Facilitation')\n        .map(encounter => {\n            const scheme = findObservation('Scheme', encounter);\n            const schemeStatus = findObservation('Scheme status', encounter);\n            const facilitationWorkflow = findObservation('Facilitation workflow', encounter);\n            const facilitationStatus = findObservation('Facilitation status', encounter);\n            return {\n                encounterDateTime: encounter.encounterDateTime || encounter.cancelDateTime,\n                scheme: scheme ? scheme.getReadableValue() : undefined,\n                schemeStatus: schemeStatus ? schemeStatus.getReadableValue() : undefined,\n                facilitationWorkflow: facilitationWorkflow ? facilitationWorkflow.getReadableValue() : undefined,\n                facilitationStatus: facilitationStatus ? facilitationStatus.getReadableValue() : undefined\n            };\n        });\n    const startFacilitationInfo = nonVoidedEncounters\n        .filter(encounter => _.isNil(encounter.encounterDateTime) || encounter.encounterType.name === 'Start Facilitation' || encounter.encounterType.name === 'Register already availed scheme')\n        .map(encounter => {\n            const encounterDateTime = encounter.encounterDateTime;\n            const enrolledSchemes = encounter.getObservationReadableValue(\"Enroll scheme\");\n            const schemesToRegister = encounter.getObservationReadableValue(\"Register scheme\");\n            const enrolled = _.map(enrolledSchemes, scheme => buildStartFacilitationStatus(encounterDateTime, [scheme], ['Facilitation in progress'], ['Enrolment'], ['Collect documents']));\n            const registered = schemesToRegister && [buildStartFacilitationStatus(encounterDateTime, [schemesToRegister], ['Availed'], ['Register'], ['Ended'])] || [];\n            return [...enrolled, ...registered];\n        }).flat();\n    const allData = [...stepInfo, ...startFacilitationInfo];\n    const availedSchemesDuringFacilitation = _.filter(allData, data => _.includes(data.schemeStatus, 'Availed')).map(data => data.scheme);\n    const availableSchemes = formElement.concept.getAnswers().map(ca => ca.concept.name);\n    const availedSchemes = [...availedSchemesDuringRegistration, ...availedSchemesDuringFacilitation].flat(1);\n    const anySchemesAvailed = [];\n    const nonAvailedSchemes = [];\n    _.forEach(availableSchemes, s => {\n        if (_.includes(availedSchemes, s)) {\n            anySchemesAvailed.push(s);\n        } else {\n            nonAvailedSchemes.push(s);\n        }\n    });\n    statusBuilder.skipAnswers(...nonAvailedSchemes);\n    statusBuilder.show().whenItem(!_.includes(programEncounter.name, 'Recurring')).is.truthy\n        .and.whenItem(anySchemesAvailed.length > 0).is.truthy;\n    return statusBuilder.build();\n};\n",
      "mandatory" : false
    }, {
      "name" : "Register a scheme",
      "uuid" : "a17b75d6-5d2d-43fc-9886-35abfeee334a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Name of the scheme",
        "uuid" : "1be5d6d6-17a3-4983-8471-7a55acf72a54"
      },
      "displayOrder" : 7.0,
      "type" : "MultiSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Update a scheme",
      "uuid" : "47484908-63e6-433e-9ba5-cc51b900678e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Please explain (Name Of The Disability Pension Scheme, Amount and Frequency)",
        "uuid" : "c97be1c3-ef3f-44b6-8c27-627c6895c3cc"
      },
      "displayOrder" : 8.0,
      "type" : "MultiSelect",
      "mandatory" : true,
      "voided" : true
    } ]
  } ],
  "decisionRule" : "",
  "visitScheduleRule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n        programEncounter,\n        programEnrolment: programEncounter.programEnrolment\n    });\n    const earliestDate = programEncounter.encounterDateTime;\n    const numberOfDaysForMaxOffset = 7;\n    const maxDate = imports.moment(earliestDate).add(numberOfDaysForMaxOffset, 'days').toDate();\n    const encounterType = 'Documents Collection';\n    const selectedSchemes = programEncounter.getObservationReadableValue(\"Enroll scheme\");\n    const schemesToUpdate = programEncounter.getObservationReadableValue(\"Update scheme\");\n    if (imports.moment().isSameOrBefore(maxDate, 'day')) {\n        _.forEach(selectedSchemes, schemeName => scheduleBuilder.add({\n            name: `${schemeName} - Collect Document`,\n            encounterType,\n            earliestDate,\n            maxDate,\n            visitCreationStrategy: 'createNew'\n        }));\n        _.forEach(schemesToUpdate, schemeName => scheduleBuilder.add({\n            name: `${schemeName} - Update - Collect Document`,\n            encounterType,\n            earliestDate,\n            maxDate,\n            visitCreationStrategy: 'createNew'\n        }));\n    }\n    const firstFacilitationDate = programEncounter.getObservationReadableValue(\"First Recurring Facilitation Date\");\n    const schemesToRegister = programEncounter.getObservationReadableValue(\"Start recurring steps for\");\n    const recurringMaxDate = imports.moment(firstFacilitationDate).add(7, 'days').toDate();\n    if (!_.isNil(schemesToRegister) && !_.isNil(firstFacilitationDate) && imports.moment().isSameOrBefore(recurringMaxDate, 'day')) {\n        scheduleBuilder.add({\n            name: `${schemesToRegister} - Recurring`,\n            encounterType: 'Recurring Facilitation',\n            earliestDate: firstFacilitationDate,\n            maxDate: recurringMaxDate,\n            visitCreationStrategy: 'createNew'\n        });\n    }\n    return scheduleBuilder.getAllUnique('name');\n};\n",
  "validationRule" : ""
}