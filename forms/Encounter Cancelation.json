{
  "name" : "Encounter Cancelation",
  "uuid" : "cd553b0e-cb52-44e6-8284-b90abaa74b00",
  "formType" : "ProgramEncounterCancellation",
  "formElementGroups" : [ {
    "uuid" : "90ef8dd0-dffd-48fd-8e67-b6e14cfa429c",
    "name" : "Information",
    "displayOrder" : 1.0,
    "display" : "Information",
    "formElements" : [ {
      "name" : "Do you want to reschedule this step to a future date?",
      "uuid" : "bfd47151-2a90-4613-8f69-181a832f3f43",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Do you want to reschedule this step to a future date",
        "uuid" : "cc07dd6a-5479-4e3b-a085-667f226db9fd"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Enter the date for rescheduling this step",
      "uuid" : "69fdccb9-ebb9-4440-9377-4ff6a158d488",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enter the date for rescheduling this step",
        "uuid" : "67fc4d4c-cf7c-4c36-a55d-b462595ec1c3"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  const rescheduleVisit = programEncounter.findCancelEncounterObservationReadableValue(\"Do you want to reschedule this step to a future date\");\n  statusBuilder.show().whenItem(rescheduleVisit === 'Yes').is.truthy;\n  return statusBuilder.build();\n};",
      "mandatory" : true
    } ]
  } ],
  "decisionRule" : "",
  "visitScheduleRule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n        programEncounter,\n        programEnrolment: programEncounter.programEnrolment\n    });\n    const maxDateMap = new Map([\n        ['Documents Collection', 7],\n        ['Submit Application', 1],\n        ['Enquire Application Status', 7],\n        ['Collect  Additional Documents', 1]\n    ]);\n    const newDate = programEncounter.findCancelEncounterObservationReadableValue(\"Enter the date for rescheduling this step\");\n    if (!_.isNil(newDate)) {\n        scheduleBuilder.add({\n            name: programEncounter.name,\n            encounterType: programEncounter.encounterType.name,\n            earliestDate: newDate,\n            maxDate: imports.moment(newDate).add(maxDateMap.get(programEncounter.encounterType.name), 'days').toDate()\n        });\n    }\n    return scheduleBuilder.getAllUnique('name');\n};",
  "validationRule" : ""
}