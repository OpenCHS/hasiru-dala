{
  "name": "Enquire Application Status",
  "uuid": "b5ca70d8-2633-4c7c-aaf6-eaac17a8410b",
  "formType": "ProgramEncounter",
  "formElementGroups": [
    {
      "uuid": "3b302c41-9ba1-4a04-8b5c-8cb19259ff44",
      "name": "Dummy",
      "displayOrder": 1.0,
      "display": "Dummy",
      "formElements": [
        {
          "name": "Dummy",
          "uuid": "642e4e32-2931-4b97-bb91-726860888039",
          "keyValues": [],
          "concept": {
            "name": "Dummy",
            "uuid": "e2a77752-ef1a-4ca7-8172-42e4fcb4dab9"
          },
          "displayOrder": 1.0,
          "type": "SingleSelect",
          "mandatory": false
        }
      ]
    }
  ],
  "decisionRule": "",
  "visitScheduleRule": "\"use strict\";\n({ params, imports}) => {\n  const programEncounter = params.entity;\n  const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n    programEncounter,\n    programEnrolment: programEncounter.programEnrolment\n  });\n  const earliestDate = programEncounter.encounterDateTime;\n  const numberOfDaysForMaxOffset = 1;\n  const maxDate = imports.moment(earliestDate).add(numberOfDaysForMaxOffset, 'days').toDate();\n  const encounterType = 'Collect  Additional Documents';\n  const schemeName = imports.lodash.trim(programEncounter.name.split('-')[0]);\n  scheduleBuilder.add({\n    //TODO : change name to <Scheme name> - <Workflow name> - Collect Document\n    name: `${schemeName} - Additional Document Collection`,\n    encounterType,\n    earliestDate,\n    maxDate\n  });\n  return scheduleBuilder.getAllUnique('name');\n};",
  "validationRule": ""
}